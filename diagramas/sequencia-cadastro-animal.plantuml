@startuml
title Diagrama de Sequência - Cadastro de Animal para Adoção

actor "Usuário Autenticado" as User
boundary "Frontend (Next.js)" as FE
control "Middleware de Auth (JWT)" as AuthMW
control "Middleware de Upload (Multer)" as UploadMW
control "Backend (Express)" as BE
entity "Prisma ORM" as ORM
database "PostgreSQL" as DB

skinparam sequence {
    ParticipantPadding 20
    BoxPadding 10
}
skinparam box {
    BorderColor #5E81AC
    BackgroundColor #ECEFF4
}

autonumber "<b>[00]"

User -> FE: Acessa "Disponibilizar animal para adoção"
FE -> User: Renderiza o formulário de cadastro de animal

User -> FE: Preenche os dados e seleciona até 5 imagens
User -> FE: Clica em "Cadastrar"
activate FE

FE -> BE: POST /animals (multipart/form-data) com Token no Header
activate BE

BE -> AuthMW: Verifica o Token JWT
activate AuthMW
AuthMW -> AuthMW: Valida assinatura e expiração do token
AuthMW --> BE: Token válido. Anexa dados do usuário (req.user)
deactivate AuthMW

BE -> UploadMW: Processa os arquivos da requisição
activate UploadMW
UploadMW -> UploadMW: Salva as imagens em um diretório temporário
UploadMW --> BE: Anexa informações dos arquivos (req.files)
deactivate UploadMW

BE -> BE: Extrai dados do animal (req.body) e ID do usuário (req.user.id)
BE -> ORM: createAnimal({ data: ..., userId: ... })
activate ORM

ORM -> DB: INSERT INTO "Animal" (...) VALUES (...)
activate DB
DB --> ORM: Retorna o registro do animal criado
deactivate DB

ORM --> BE: Retorna o objeto do novo animal
deactivate ORM

BE -> BE: Itera sobre os arquivos (req.files) e associa ao animal
loop Para cada imagem enviada
    BE -> ORM: createImage({ animalId: ..., path: ... })
    activate ORM
    ORM -> DB: INSERT INTO "AnimalImage" (...) VALUES (...)
    deactivate ORM
end

BE --> FE: Resposta 201 Created com os dados do animal
deactivate BE

FE -> User: Exibe mensagem de sucesso e redireciona para "Meus animais"
deactivate FE

@enduml
