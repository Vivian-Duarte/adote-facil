@startuml
title Diagrama de Sequência - Autenticação de Usuário

actor Usuário
boundary "Frontend (Next.js)" as FE
control "Backend (Express)" as BE
entity "Prisma ORM" as ORM
database "PostgreSQL" as DB

skinparam sequence {
    ParticipantPadding 20
    BoxPadding 10
}
skinparam box {
    BorderColor #4C566A
    BackgroundColor #ECEFF4
}

autonumber "<b>[00]"

Usuário -> FE: Acessa a página /login e preenche Email e Senha
FE -> Usuário: Renderiza o formulário de login

Usuário -> FE: Clica no botão "Login"
activate FE

FE -> BE: Envia requisição POST /login com {email, senha}
activate BE

BE -> ORM: findUserByEmail(email)
activate ORM

ORM -> DB: SELECT * FROM "User" WHERE email = $1
activate DB
DB --> ORM: Retorna dados do usuário (ou null)
deactivate DB
ORM --> BE: Retorna o objeto do usuário encontrado

BE -> BE: Compara a senha enviada com o hash armazenado

alt Credenciais válidas
    BE -> BE: Gera Token JWT com o ID do usuário
    BE --> FE: Resposta 200 OK com { token, userData }
    
    activate FE
    FE -> FE: Armazena o token (e.g., em Cookies)
    FE -> Usuário: Redireciona para a área logada (/area_logada)
    deactivate FE
else Credenciais inválidas ou usuário não encontrado
    BE --> FE: Resposta 401 Unauthorized
    activate FE
    FE -> Usuário: Exibe mensagem de erro "Email ou senha inválidos"
    deactivate FE
end

deactivate BE
deactivate FE

@enduml
